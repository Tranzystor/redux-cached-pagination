{"version":3,"sources":["../src/pagination-lib/createPaginator.js"],"names":["createPaginator","actionName","callApi","config","searchParamsInitState","actionTypes","validatedConfig","validateConfig","storeName","selectors","getTotalElements","getPage","getPageNormalized","getPaginationParams","getSearchParams","getCurrentPage","getElementByTotalIndex","elementsPerPage","reducers","pagination","entities","paginationParams","updatePaginationParams","removeCache","searchParams","updateSearchParams","currentPage","setCurrentPageNumber","requestPage","setCurrentPage","convertTotalItemIndexToPageNum","newConfig","refreshResultInBackground","timeToRefresh","searchHistoryLength"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAGO,IAAMA,4CAAkB,SAAlBA,eAAkB,CAACC,UAAD,EAAaC,OAAb,EAAsBC,MAAtB,EAA8BC,qBAA9B,EAAwD;AACnF,QAAMC,cAAc,wCAA4BJ,UAA5B,CAApB;AACA,QAAMK,kBAAkBC,eAAeJ,MAAf,CAAxB;AACA,QAAMK,YAAY,2BAAeP,UAAf,CAAlB;;AAEA,WAAO;AACHQ,mBAAW;AACPC,8BAAkB,iCAAiBF,SAAjB,CADX;AAEPG,qBAAS,wBAAQH,SAAR,CAFF;AAGPI,+BAAmB,wBAAQJ,SAAR,EAAmB,IAAnB,CAHZ;AAIPK,iCAAqB,oCAAoBL,SAApB,CAJd;AAKPM,6BAAiB,gCAAgBN,SAAhB,CALV;AAMPO,4BAAgB,+BAAeP,SAAf,CANT;AAOPQ,oCAAwB,uCAAuBR,SAAvB,EAAkCF,gBAAgBW,eAAlD;AAPjB,SADR;AAUHC,kBAAU,4BAAgB;AACtBC,wBAAY,iCAASd,WAAT,CADU;AAEtBe,sBAAU,iCAASf,WAAT,CAFY;AAGtBgB,8BAAkB,yCAAiBhB,YAAYiB,sBAA7B,EAAqDjB,YAAYkB,WAAjE,CAHI;AAItBC,0BAAc,4CAAoBnB,YAAYoB,kBAAhC,EAAoDrB,yBAAyB,EAA7E,CAJQ;AAKtBsB,yBAAa,2CAAmBrB,YAAYsB,oBAA/B;AALS,SAAhB,CAVP;AAiBHnB,4BAjBG;AAkBHoB,qBAAa,iCAASvB,WAAT,EAAsBG,SAAtB,EAAiCN,OAAjC,EAA0CI,eAA1C,CAlBV;AAmBHgB,gCAAwB,+CAAuBjB,YAAYiB,sBAAnC,CAnBrB;AAoBHG,4BAAoB,2CAAmBpB,YAAYoB,kBAA/B,CApBjB;AAqBHI,wBAAgB,uCAAexB,YAAYsB,oBAA3B,CArBb;AAsBHG,wCAAgC,2CAA+BxB,gBAAgBW,eAA/C;AAtB7B,KAAP;AAwBH,CA7BM;;AA+BP,IAAMV,iBAAiB,SAAjBA,cAAiB,CAACJ,MAAD,EAAY;AAC/B,QAAM4B;AACFC,mCAA2B,IADzB;AAEFC,uBAAe,IAFb;AAGFC,6BAAqB,CAHnB;AAIFjB,yBAAiB;AAJf,OAKCd,MALD,CAAN;AAOA,WAAO4B,SAAP;AACH,CATD","file":"createPaginator.js","sourcesContent":["import { buildFetchingApiActionNames, buildStoreName, convertTotalItemIndexToPageNum } from './utils';\r\nimport { loadPage, updatePaginationParams, updateSearchParams, setCurrentPage } from './paginationActions';\r\nimport { paginate, entities, paginationParams, searchParamsReducer } from './paginationReducer'\r\nimport { getTotalElements, getPage, getPaginationParams, getSearchParams, getCurrentPage, getElementByTotalIndex } from './selectors';\r\nimport { combineReducers } from 'redux';\r\nimport { currentPageReducer } from './paginationReducer';\r\n\r\nexport const createPaginator = (actionName, callApi, config, searchParamsInitState) => {\r\n    const actionTypes = buildFetchingApiActionNames(actionName);\r\n    const validatedConfig = validateConfig(config);\r\n    const storeName = buildStoreName(actionName);\r\n\r\n    return {\r\n        selectors: {\r\n            getTotalElements: getTotalElements(storeName),\r\n            getPage: getPage(storeName),\r\n            getPageNormalized: getPage(storeName, true),\r\n            getPaginationParams: getPaginationParams(storeName),\r\n            getSearchParams: getSearchParams(storeName),\r\n            getCurrentPage: getCurrentPage(storeName),\r\n            getElementByTotalIndex: getElementByTotalIndex(storeName, validatedConfig.elementsPerPage)\r\n        },\r\n        reducers: combineReducers({\r\n            pagination: paginate(actionTypes),\r\n            entities: entities(actionTypes),\r\n            paginationParams: paginationParams(actionTypes.updatePaginationParams, actionTypes.removeCache),\r\n            searchParams: searchParamsReducer(actionTypes.updateSearchParams, searchParamsInitState || {}),\r\n            currentPage: currentPageReducer(actionTypes.setCurrentPageNumber)\r\n        }),\r\n        storeName,\r\n        requestPage: loadPage(actionTypes, storeName, callApi, validatedConfig),\r\n        updatePaginationParams: updatePaginationParams(actionTypes.updatePaginationParams),\r\n        updateSearchParams: updateSearchParams(actionTypes.updateSearchParams),\r\n        setCurrentPage: setCurrentPage(actionTypes.setCurrentPageNumber),\r\n        convertTotalItemIndexToPageNum: convertTotalItemIndexToPageNum(validatedConfig.elementsPerPage)\r\n    }\r\n}\r\n\r\nconst validateConfig = (config) => {\r\n    const newConfig = {\r\n        refreshResultInBackground: true,\r\n        timeToRefresh: 5000,\r\n        searchHistoryLength: 5,\r\n        elementsPerPage: 30,\r\n        ...config\r\n    }\r\n    return newConfig;\r\n}"]}