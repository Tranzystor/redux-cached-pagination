{"version":3,"sources":["../src/pagination-lib/paginationActions.js"],"names":["loadPage","actionTypes","storeName","callApi","config","fetching","success","failure","removeCache","refreshing","removeSearchResult","searchHistoryLength","page","searchParams","dispatch","getState","store","entryToRemove","getEntryKeyToRemove","type","filtersKey","validSearchParams","getValidSearchParams","cachedResult","getPage","shouldAbandonAction","Promise","resolve","then","isResponseValid","response","reject","newTotalCount","totalElements","actualTotalCount","undefined","pagination","elementsCount","error","paginationEntries","Object","entries","length","min","map","key","val","time","lastUpdateTime","reduce","curr","refreshResultInBackground","timeToRefresh","isFetching","isTimeToRefresh","prevTime","diff","result","Date","now","pages","foundPage","elements","entities","Number","isInteger","updatePaginationParams","paramsToStore","paginationParams","updateSearchParams","updateSearchParamsActionType","searchParamsToStore","setCurrentPage","setCurrentPageNumberActionType","currentPageNumber","pageNumber"],"mappings":"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","file":"paginationActions.js","sourcesContent":["\r\nimport { buildUniqueKey } from './utils';\r\n\r\nexport const loadPage = (actionTypes, storeName, callApi, config) => {\r\n    const { fetching,\r\n        success,\r\n        failure,\r\n        removeCache,\r\n        refreshing,\r\n        removeSearchResult } = actionTypes;\r\n    const { searchHistoryLength } = config;\r\n\r\n    return (page, searchParams) =>\r\n        (dispatch, getState) => {\r\n\r\n            const store = getState()[storeName];\r\n            const entryToRemove = getEntryKeyToRemove(store, searchHistoryLength);\r\n            if (entryToRemove) {\r\n                dispatch({\r\n                    type: removeSearchResult,\r\n                    filtersKey: entryToRemove\r\n                });\r\n            }\r\n\r\n            const validSearchParams = getValidSearchParams(searchParams, store);\r\n\r\n            const filtersKey = buildUniqueKey(validSearchParams);\r\n            const cachedResult = getPage(getState()[storeName], filtersKey, page);\r\n            if (shouldAbandonAction(cachedResult, config)) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            if (!cachedResult) {\r\n                dispatch({\r\n                    type: fetching,\r\n                    filtersKey: filtersKey,\r\n                    page: page\r\n                });\r\n            } else {\r\n                dispatch({\r\n                    type: refreshing,\r\n                    filtersKey: filtersKey,\r\n                    page: page\r\n                });\r\n            }\r\n\r\n            return callApi(page, validSearchParams, dispatch, getState).then(\r\n                response => {\r\n                    if (!isResponseValid(response)) {\r\n                        dispatch({\r\n                            type: failure,\r\n                            filtersKey: filtersKey,\r\n                            page: page\r\n                        });\r\n                        return Promise.reject('server response is not valid');\r\n                    }\r\n\r\n                    const newTotalCount = response.totalElements;\r\n                    let actualTotalCount = undefined;\r\n                    if (getState()[storeName].pagination[filtersKey]) {\r\n                        actualTotalCount = getState()[storeName].pagination[filtersKey].elementsCount;\r\n                    }\r\n\r\n                    if (actualTotalCount && actualTotalCount !== newTotalCount) {\r\n                        dispatch({\r\n                            type: removeCache\r\n                        })\r\n                    }\r\n                    dispatch({\r\n                        type: success,\r\n                        filtersKey: filtersKey,\r\n                        page: page,\r\n                        response: response\r\n                    });\r\n                },\r\n                error => {\r\n                    dispatch({\r\n                        type: failure,\r\n                        filtersKey: filtersKey,\r\n                        page: page\r\n                    });\r\n                    return Promise.reject(error);\r\n                }\r\n            )\r\n        }\r\n}\r\n\r\nconst getValidSearchParams = (searchParams, store) => {\r\n    if (!searchParams) {\r\n        return store.searchParams;\r\n    }\r\n    return searchParams;\r\n}\r\n\r\nconst getEntryKeyToRemove = (store, searchHistoryLength) => {\r\n    const paginationEntries = Object.entries(store.pagination);\r\n    if (paginationEntries.length > searchHistoryLength) {\r\n\r\n        const min = paginationEntries.map(([key, val]) => {\r\n            return { key: key, time: val.lastUpdateTime }\r\n        }).reduce((min, curr) => {\r\n            if (!min) {\r\n                return curr;\r\n            }\r\n            if (curr.time < min.time) {\r\n                return curr;\r\n            }\r\n            return min;\r\n        }, null);\r\n        return min.key\r\n    }\r\n    return null;\r\n}\r\n\r\nconst shouldAbandonAction = (cachedResult, config) => {\r\n    if (!cachedResult) {\r\n        return false;\r\n    }\r\n\r\n    const { refreshResultInBackground, timeToRefresh } = config;\r\n    if (cachedResult.isFetching || !refreshResultInBackground) {\r\n        return true;\r\n    }\r\n\r\n    if (isTimeToRefresh(cachedResult.lastUpdateTime, timeToRefresh)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nconst isTimeToRefresh = (prevTime, diff) => {\r\n    const result = Date.now() - prevTime > diff;\r\n    return result;\r\n}\r\n\r\nconst getPage = (store, filtersKey, page) => {\r\n    if (store && store.pagination && store.pagination[filtersKey] &&\r\n        store.pagination[filtersKey].pages) {\r\n        const foundPage = store.pagination[filtersKey].pages[page];\r\n        return foundPage;\r\n    }\r\n    return null;\r\n}\r\n\r\nconst isResponseValid = (response) => {\r\n    const { totalElements, elements, entities } = response;\r\n\r\n    if (Number.isInteger(totalElements) && totalElements === 0) {\r\n        return true;\r\n    }\r\n\r\n    return totalElements && elements && entities;\r\n}\r\n\r\nexport const updatePaginationParams = (updatePaginationParams) => {\r\n    return (paramsToStore) => (dispatch, getState) => {\r\n        dispatch({\r\n            type: updatePaginationParams,\r\n            paginationParams: paramsToStore\r\n        });\r\n    }\r\n}\r\n\r\nexport const updateSearchParams = (updateSearchParamsActionType) => {\r\n    return (searchParamsToStore) => (dispatch, getState) => {\r\n        dispatch({\r\n            type: updateSearchParamsActionType,\r\n            searchParams: searchParamsToStore\r\n        });\r\n    }\r\n}\r\n\r\nexport const setCurrentPage = (setCurrentPageNumberActionType) => {\r\n    return (currentPageNumber) => (dispatch, getState) => {\r\n        dispatch({\r\n            type: setCurrentPageNumberActionType,\r\n            pageNumber: currentPageNumber\r\n        });\r\n    }\r\n}\r\n\r\n"]}